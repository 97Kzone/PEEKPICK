pipeline {
    agent any
    stages {
        stage("Set Variable") {
            steps {
                script {
                    IMAGE_NAME_FE = ""
                    IMAGE_NAME_BE = "wnsdud12365/peekpick-springboot"
                    IMAGE_STORAGE = "https://registry.hub.docker.com"
                    IMAGE_STORAGE_CREDENTIAL = "docker-hub"
                    APPLICATION_YML_PATH = "/usr/spring/resources"
                    CONTAINER_NAME_BE = "peekpick_be"
                    CONTAINER_NAME_FE = "peekpick_fe"
                    PROJECT_DIR_FE = "frontend"
                    PROJECT_DIR_BE = "backend"
                }
            }
        }

        stage("copy yml") {
            steps {
                sh "cp -r ${APPLICATION_YML_PATH} ${PROJECT_DIR_BE}/src/main"
            }
        }

        stage("be build") {
            // build
            steps{
                sh """
                cd ${PROJECT_DIR_BE}
                chmod 777 ./gradlew
                ./gradlew clean build
                """
            }
        }

        // 컨테이너 중단
        stage("container cleaning") {
            steps{
                script {
                    def isContainerRunning = sh(
                        script: "docker ps -q -f name=${CONTAINER_NAME_BE}",
                        returnStatus: true
                    )
                    if (isContainerRunning == 0) {
                        sh "docker stop ${CONTAINER_NAME_BE}"
                        sh "docker rm -f ${CONTAINER_NAME_BE}"
                    } else {
                        echo "Container ${CONTAINER_NAME_BE} is not running."
                    }
                }
            }
        }

        // 이미지 삭제
        stage("image cleaning") {
            steps{
                sh "docker images ${IMAGE_NAME_BE} -q | xargs -r docker rmi -f"
                // sh "docker image ${IMAGE_NAME_FE} -q | xargs -r docker rmi -f"
            }
        }
        
        // 도커 이미지 빌드
        stage("be image build") {
            steps {
                dir("${PROJECT_DIR_BE}") {
                    script {
                        sh "docker build --no-cache -t ${IMAGE_NAME_BE} ."
                    }
                }
                
                // script {
                //     docker.withRegistry("", ""){
                //         sh "docker push ${IMAGE_NAME_BE}"
                //     }
                // }
            }
        }

        // be 컨테이너 실행 (개별)
        // stage("be container run") {
        //     steps {
        //         script {
        //             sh "docker run -d -p 8081:8081 --name ${CONTAINER_NAME_BE} ${IMAGE_NAME_BE}"
        //         }
        //     }
        // }

        stage("container run through compose") {
            steps {
                script {
                    sh "docker-compose up -d"
                }
            }
        }
    }
}